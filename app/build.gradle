plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.0.11'
    id "com.diffplug.spotless" version "6.3.0"
}

var heapSize = ['-Xmx4g', '-Xms1g']

application {
    applicationDefaultJvmArgs = ['-javaagent:lib/jars/measurer-0.1.1.jar',
                                 '--add-opens', 'java.base/java.lang=ALL-UNNAMED',
                                 '--add-opens', 'java.base/java.util=ALL-UNNAMED',
                                 '--add-opens', 'javafx.graphics/com.sun.javafx.tk=ALL-UNNAMED',
                                 '--add-opens', 'javafx.graphics/javafx.stage=ALL-UNNAMED',
                                 '--add-opens', 'javafx.graphics/com.sun.javafx.tk.quantum=ALL-UNNAMED',
                                 '--add-opens', 'javafx.graphics/com.sun.glass.ui=ALL-UNNAMED']
    applicationDefaultJvmArgs += heapSize
}

repositories {
    mavenCentral()
}

javafx {
    version = "17"
    modules = [ 'javafx.base', 'javafx.controls', 'javafx.fxml', 'javafx.graphics' ]
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

dependencies {
    // JUnit
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // Java OpenGL
    implementation files('lib/jars/jogamp-fat.jar')

    // Parallel file compression
    implementation files('lib/jars/parallelgzip-1.0.6.jar')

    // Common utilities
    implementation 'org.apache.commons:commons-compress:1.21'

    // Polygon Triangulation
    implementation 'io.github.earcut4j:earcut4j:2.2.2'

    // Memory Measurer
    implementation files('lib/jars/measurer-0.1.1.jar')

    // JavaFX
    implementation 'org.openjfx:javafx-base:0.0.11:win'
    implementation 'org.openjfx:javafx-base:0.0.11:mac'
    implementation 'org.openjfx:javafx-base:0.0.11:linux'
    implementation 'org.openjfx:javafx-controls:0.0.11:win'
    implementation 'org.openjfx:javafx-controls:0.0.11:mac'
    implementation 'org.openjfx:javafx-controls:0.0.11:linux'
    implementation 'org.openjfx:javafx-fxml:0.0.11:win'
    implementation 'org.openjfx:javafx-fxml:0.0.11:mac'
    implementation 'org.openjfx:javafx-fxml:0.0.11:linux'
    implementation 'org.openjfx:javafx-graphics:0.0.11:win'
    implementation 'org.openjfx:javafx-graphics:0.0.11:mac'
    implementation 'org.openjfx:javafx-graphics:0.0.11:linux'
}

compileJava.options.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

application {
    mainClass = 'application.Main'
}

tasks.withType(AbstractCompile) {
    options.compilerArgs += ["--enable-preview", "--add-modules", "jdk.incubator.vector"]
}

tasks.withType(Test) {
    jvmArgs += ["--enable-preview", "--add-modules", "jdk.incubator.vector"]
}

tasks.withType(JavaExec) {
    jvmArgs += ["--enable-preview", "--add-modules", "jdk.incubator.vector"]
    jvmArgs += heapSize
}

tasks.named('test') {
    useJUnitPlatform()
}

spotless {
    java {
        // use the default importOrder configuration
        importOrder()

        removeUnusedImports()

        googleJavaFormat()
        indentWithTabs(2)
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
}
